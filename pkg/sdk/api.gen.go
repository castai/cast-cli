// Package sdk provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sdk

import (
	"time"
)

// AddonsConfig defines model for AddonsConfig.
type AddonsConfig struct {

	// Cert-Manager
	CertManager *CertManagerConfig `json:"certManager,omitempty"`

	// Kubernetes dashboard
	Dashboard *DashboardConfig `json:"dashboard,omitempty"`

	// Elastic Cloud on Kubernetes + Logging setup
	ElasticLogging *ElasticLoggingConfig `json:"elasticLogging,omitempty"`

	// Grafana -- UI for Prometheus
	Grafana *GrafanaConfig `json:"grafana,omitempty"`

	// KEDA (keda.sh) an event-based k8s resources autoscaler
	Keda *KedaConfig `json:"keda,omitempty"`

	// Nginx-based ingress controller
	NginxIngress *NginxIngressConfig `json:"nginxIngress,omitempty"`
}

// AuditEvent defines model for AuditEvent.
type AuditEvent struct {
	Event *interface{} `json:"event,omitempty"`

	// type of the performed operation
	EventType   string         `json:"eventType"`
	InitiatedBy AuditInitiator `json:"initiatedBy"`

	// Event creation UTC time in RFC3339 format.
	Time time.Time `json:"time"`
}

// AuditEventClusterCreated defines model for AuditEventClusterCreated.
type AuditEventClusterCreated struct {

	// snapshot of created cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventClusterDeleted defines model for AuditEventClusterDeleted.
type AuditEventClusterDeleted struct {

	// snapshot of deleted cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventList defines model for AuditEventList.
type AuditEventList struct {
	Items []AuditEvent `json:"items"`
}

// AuditInitiator defines model for AuditInitiator.
type AuditInitiator struct {

	// user or system ID.
	Id string `json:"id"`

	// user or system name.
	Name *string `json:"name,omitempty"`
}

// AuditLogEvent defines model for AuditLogEvent.
type AuditLogEvent struct {

	// Event creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Audit Log Event ID, generated at the time of creation.
	Id string `json:"id"`

	// Metadata about the event
	Metadata map[string]interface{} `json:"metadata"`

	// Operation.
	Operation string `json:"operation"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`
}

// AuthTokenCreateResponse defines model for AuthTokenCreateResponse.
type AuthTokenCreateResponse struct {

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Generated secret for this auth token (only shown once on creation)
	Token string `json:"token"`
}

// AuthTokenList defines model for AuthTokenList.
type AuthTokenList struct {
	Items []AuthToken `json:"items"`
}

// CastRegion defines model for CastRegion.
type CastRegion struct {

	// List of available cloud providers in given CAST AI region.
	Clouds []Cloud `json:"clouds"`

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// CastRegionList defines model for CastRegionList.
type CastRegionList struct {
	Items []CastRegion `json:"items"`
}

// CertManagerConfig defines model for CertManagerConfig.
type CertManagerConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// Cloud defines model for Cloud.
type Cloud struct {

	// Cloud provider name.
	Name string `json:"name"`
}

// CloudCredentials defines model for CloudCredentials.
type CloudCredentials struct {

	// Cloud type that these credentials represent.
	Cloud string `json:"cloud"`

	// Actual credentials data of given cloud.
	Credentials string `json:"credentials"`

	// Id of cloud credentials item.
	Id string `json:"id"`

	// Name of cloud credentials object.
	Name   string                         `json:"name"`
	UsedBy *[]CloudCredentialsReservation `json:"usedBy,omitempty"`
}

// CloudCredentialsList defines model for CloudCredentialsList.
type CloudCredentialsList struct {
	Items []CloudCredentials `json:"items"`
}

// CloudCredentialsReservation defines model for CloudCredentialsReservation.
type CloudCredentialsReservation struct {

	// Id of the object which uses credentials.
	Id string `json:"id"`

	// Name of the object which uses credentials.
	Name string `json:"name"`
}

// CloudType defines model for CloudType.
type CloudType string

// List of CloudType
const (
	CloudType_aws   CloudType = "aws"
	CloudType_azure CloudType = "azure"
	CloudType_gcp   CloudType = "gcp"
)

// ClusterHealth defines model for ClusterHealth.
type ClusterHealth struct {
	Cilium     ClusterHealthCilium     `json:"cilium"`
	Kubernetes ClusterHealthKubernetes `json:"kubernetes"`
	Nodes      ClusterHealthNodes      `json:"nodes"`
}

// ClusterHealthCilium defines model for ClusterHealthCilium.
type ClusterHealthCilium struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthKubernetes defines model for ClusterHealthKubernetes.
type ClusterHealthKubernetes struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthNode defines model for ClusterHealthNode.
type ClusterHealthNode struct {
	HostIp string `json:"hostIp"`
	Name   string `json:"name"`
	State  string `json:"state"`
}

// ClusterHealthNodes defines model for ClusterHealthNodes.
type ClusterHealthNodes struct {
	Items []ClusterHealthNode `json:"items"`
	Msg   string              `json:"msg"`
}

// ClusterLimitsCpu defines model for ClusterLimitsCpu.
type ClusterLimitsCpu struct {

	// Defines the maximum allowed amount of vCPUs in the whole cluster.
	MaxCores int64 `json:"maxCores"`

	// Defines the minimum allowed amount of vCPUs in the whole cluster.
	MinCores int64 `json:"minCores"`
}

// ClusterLimitsPolicy defines model for ClusterLimitsPolicy.
type ClusterLimitsPolicy struct {

	// Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
	Cpu ClusterLimitsCpu `json:"cpu"`

	// Enable/disable cluster size limits policy.
	Enabled bool `json:"enabled"`
}

// ClusterMetrics defines model for ClusterMetrics.
type ClusterMetrics struct {

	// The query result data.
	Data *struct {

		// Sample data array based. Format is based on the result type. Check the Prometheus API docs.
		Result *[]map[string]interface{} `json:"result,omitempty"`

		// The format of the result data.
		ResultType *string `json:"resultType,omitempty"`
	} `json:"data,omitempty"`

	// Only set if status is "error". The error message.
	Error *string `json:"error,omitempty"`

	// Only set if status is "error". The data field may still hold additional data.
	ErrorType *string `json:"errorType,omitempty"`

	// Whether the metrics query was successful
	Status *string `json:"status,omitempty"`

	// Only if there were warnings while executing the request. There will still be data in the data field.
	Warnings *[]string `json:"warnings,omitempty"`
}

// ClusterRegion defines model for ClusterRegion.
type ClusterRegion struct {

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// CpuUtilizationPolicies defines model for CpuUtilizationPolicies.
type CpuUtilizationPolicies struct {

	// Enable/disable CPU utilization policies.
	Enabled bool `json:"enabled"`

	// CPU low watermark policy defines the lower bound of average cluster worker nodes CPU load in percentages over the duration in seconds.
	ScaleDownThreshold *ScaleDownThreshold `json:"scaleDownThreshold,omitempty"`

	// CPU high watermark policy defines the higher bound of average cluster CPU load in percentages over the duration in seconds.
	ScaleUpThreshold *ScaleUpThreshold `json:"scaleUpThreshold,omitempty"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name string `json:"name"`

	// Initial nodes of this cluster. Must contain final masters count.
	Nodes []Node `json:"nodes"`

	// CAST AI region to create the cluster in.
	Region string `json:"region"`
}

// DashboardConfig defines model for DashboardConfig.
type DashboardConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// DeletedNode defines model for DeletedNode.
type DeletedNode struct {

	// specifies how long should drain be attempted (in seconds).
	DrainTimeout *int `json:"drain_timeout,omitempty"`

	// when set to false, node deletion will be aborted if drain timeout expires.
	Force *bool `json:"force,omitempty"`

	// node ID autogenerated at the time of node creation
	Id string `json:"id"`
}

// ElasticLoggingConfig defines model for ElasticLoggingConfig.
type ElasticLoggingConfig struct {
	Config *struct {
		HaMode *string `json:"haMode,omitempty"`
	} `json:"config,omitempty"`

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// FirewallDeleteRequest defines model for FirewallDeleteRequest.
type FirewallDeleteRequest struct {

	// Firewall IP Cidr.
	Cidr      string `json:"cidr"`
	ClusterId string `json:"clusterId"`
}

// FirewallRequest defines model for FirewallRequest.
type FirewallRequest struct {

	// Firewall IP Cidr.
	Cidr      string `json:"cidr"`
	ClusterId string `json:"clusterId"`
}

// GSLBDeleteRequest defines model for GSLBDeleteRequest.
type GSLBDeleteRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBRequest defines model for GSLBRequest.
type GSLBRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Array of all cloud load balancer hostnames and IP addresses which should be globally load balanced.
	Hosts []string `json:"hosts"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBResponse defines model for GSLBResponse.
type GSLBResponse struct {

	// Hostname of the GSLB.
	Dns string `json:"dns"`
}

// GrafanaConfig defines model for GrafanaConfig.
type GrafanaConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// IngressLoadBalancer defines model for IngressLoadBalancer.
type IngressLoadBalancer struct {

	// Load balancer address.
	Address string `json:"address"`

	// Type/origin of load balancer.
	Type string `json:"type"`
}

// KedaConfig defines model for KedaConfig.
type KedaConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// KubernetesCluster defines model for KubernetesCluster.
type KubernetesCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Cluster ID, generated at the time of creation
	Id string `json:"id"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name string `json:"name"`

	// Cluster nodes.
	Nodes []Node `json:"nodes"`

	// Optional notes added when pausing the cluster.
	PausedNotes   *string `json:"pausedNotes,omitempty"`
	ReconcileMode string  `json:"reconcileMode"`

	// CAST AI region used by cluster.
	Region ClusterRegion `json:"region"`

	// Current status of the cluster
	Status string `json:"status"`
}

// KubernetesClusterAuditLogEventsList defines model for KubernetesClusterAuditLogEventsList.
type KubernetesClusterAuditLogEventsList struct {
	Items []AuditLogEvent `json:"items"`
}

// KubernetesClusterFeedbackEvent defines model for KubernetesClusterFeedbackEvent.
type KubernetesClusterFeedbackEvent struct {

	// Event creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Cluster feedback event ID, generated at the time of creation.
	Id string `json:"id"`

	// Message of this event.
	Message string `json:"message"`

	// Severity level.
	Severity string `json:"severity"`
}

// KubernetesClusterFeedbackEventsList defines model for KubernetesClusterFeedbackEventsList.
type KubernetesClusterFeedbackEventsList struct {
	Items []KubernetesClusterFeedbackEvent `json:"items"`
}

// KubernetesClusterList defines model for KubernetesClusterList.
type KubernetesClusterList struct {
	Items []KubernetesCluster `json:"items"`
}

// KubernetesIngressController defines model for KubernetesIngressController.
type KubernetesIngressController struct {

	// Set of load balancers forwarding requests to the ingress.
	LoadBalancers []IngressLoadBalancer `json:"loadBalancers"`

	// Available ingress controller ports.
	Ports []int `json:"ports"`
}

// NginxIngressConfig defines model for NginxIngressConfig.
type NginxIngressConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// Node defines model for Node.
type Node struct {
	Cloud CloudType `json:"cloud"`

	// node ID autogenerated at the time of node creation
	Id *string `json:"id,omitempty"`

	// Precise VM instance type for specific cloud. If specified, "shape" field is ignored.
	InstanceType string `json:"instanceType"`

	// Node type
	Role NodeType `json:"role"`

	// CAST AI shape defining VM template. Field is required unless "instanceType" is specified.
	Shape NodeShape `json:"shape"`

	// Kubernetes node state
	State *NodeState `json:"state,omitempty"`
}

// NodeList defines model for NodeList.
type NodeList struct {
	Items []Node `json:"items"`
}

// NodeShape defines model for NodeShape.
type NodeShape string

// List of NodeShape
const (
	NodeShape__x_large NodeShape = "2x-large"
	NodeShape_large    NodeShape = "large"
	NodeShape_medium   NodeShape = "medium"
	NodeShape_small    NodeShape = "small"
	NodeShape_x_large  NodeShape = "x-large"
	NodeShape_x_small  NodeShape = "x-small"
)

// NodeState defines model for NodeState.
type NodeState struct {

	// Current status of a node
	Phase *string `json:"phase,omitempty"`
}

// NodeType defines model for NodeType.
type NodeType string

// List of NodeType
const (
	NodeType_master NodeType = "master"
	NodeType_worker NodeType = "worker"
)

// NodeUpdateOperation defines model for NodeUpdateOperation.
type NodeUpdateOperation struct {
	Add    *[]Node        `json:"add,omitempty"`
	Delete *[]DeletedNode `json:"delete,omitempty"`
}

// PauseCluster defines model for PauseCluster.
type PauseCluster struct {

	// Optional notes when pausing a cluster (2000 characters at most)
	Notes *string `json:"notes,omitempty"`
}

// PoliciesConfig defines model for PoliciesConfig.
type PoliciesConfig struct {

	// Defines minimum and maximum amount of vCPUs for cluster's worker nodes.
	ClusterLimits ClusterLimitsPolicy `json:"clusterLimits"`

	// Policy defining CPU high and low watermarks used by autoscaler to optimize cluster resources utilization.
	CpuUtilization CpuUtilizationPolicies `json:"cpuUtilization"`

	// Enable / disable all policies.
	Enabled bool `json:"enabled"`

	// Policy defining autoscaler's behavior when unscedulable pods were detected.
	UnschedulablePods UnschedulablePodsPolicy `json:"unschedulablePods"`
}

// ScaleDownThreshold defines model for ScaleDownThreshold.
type ScaleDownThreshold struct {

	// Average cluster's worker CPU load in percentages.
	AvgCpuLoadPercentageLessThan int64 `json:"avgCpuLoadPercentageLessThan"`

	// Duration in seconds.
	EvaluationPeriodSeconds int64 `json:"evaluationPeriodSeconds"`
}

// ScaleUpThreshold defines model for ScaleUpThreshold.
type ScaleUpThreshold struct {

	// Average cluster's worker CPU load in percentages.
	AvgCpuLoadPercentageMoreThan int64 `json:"avgCpuLoadPercentageMoreThan"`

	// Duration in seconds.
	EvaluationPeriodSeconds int64 `json:"evaluationPeriodSeconds"`
}

// UnschedulablePodsPolicy defines model for UnschedulablePodsPolicy.
type UnschedulablePodsPolicy struct {

	// Enable/disable unschedulable pods detection policy.
	Enabled bool `json:"enabled"`

	// Duration in seconds for how long any of the pods should remain in 'Unschedulable' state to trigger upscaling action.
	EvaluationPeriodSeconds int64 `json:"evaluationPeriodSeconds"`
}

// UserSession defines model for UserSession.
type UserSession struct {

	// full name of logged-in user, e.g. "John Doe". Managed by Auth0 and directly taken from login JWT claim "name".
	Name *string `json:"name,omitempty"`
}

// MetricsType defines model for MetricsType.
type MetricsType string

// List of MetricsType
const (
	MetricsType_cloud_cpu_usage    MetricsType = "cloud_cpu_usage"
	MetricsType_cloud_memory_usage MetricsType = "cloud_memory_usage"
	MetricsType_node_cpu_usage     MetricsType = "node_cpu_usage"
	MetricsType_node_memory_usage  MetricsType = "node_memory_usage"
)

// AuthTokenId defines model for authTokenId.
type AuthTokenId string

// ClusterId defines model for clusterId.
type ClusterId string

// CredentialsId defines model for credentialsId.
type CredentialsId string

// ReturnTo defines model for returnTo.
type ReturnTo string

// LoginParams defines parameters for Login.
type LoginParams struct {

	// URL to redirect browser to after operation completes
	ReturnTo *ReturnTo `json:"returnTo,omitempty"`

	// optional override for URL to redirect browser from auth0 back to backend, for situations where backend is being reached via proxy
	Auth0returnTo *string `json:"auth0returnTo,omitempty"`

	// optional hint for which screen to use when redirecting to authentication pages.
	ScreenHint *string `json:"screenHint,omitempty"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {

	// URL to redirect browser to after operation completes
	ReturnTo *ReturnTo `json:"returnTo,omitempty"`
}

// CreateAuthTokenJSONBody defines parameters for CreateAuthToken.
type CreateAuthTokenJSONBody AuthToken

// CreateCloudCredentialsJSONBody defines parameters for CreateCloudCredentials.
type CreateCloudCredentialsJSONBody CloudCredentials

// DeleteFirewallJSONBody defines parameters for DeleteFirewall.
type DeleteFirewallJSONBody FirewallDeleteRequest

// CreateOrUpdateFirewallJSONBody defines parameters for CreateOrUpdateFirewall.
type CreateOrUpdateFirewallJSONBody FirewallRequest

// DeleteGslbJSONBody defines parameters for DeleteGslb.
type DeleteGslbJSONBody GSLBDeleteRequest

// CreateOrUpdateGslbJSONBody defines parameters for CreateOrUpdateGslb.
type CreateOrUpdateGslbJSONBody GSLBRequest

// ListKubernetesClustersParams defines parameters for ListKubernetesClusters.
type ListKubernetesClustersParams struct {

	// Optional parameter to query for clusters which are using the particular credentials.
	// Provide as repeated parameter in case of multiple arguments, e.g. `?credentialsId=123&credentialsId=456`.
	// Cluster will be included in the list if it's using any of the provided credentials.
	CredentialsId *[]string `json:"credentialsId,omitempty"`
}

// CreateNewClusterJSONBody defines parameters for CreateNewCluster.
type CreateNewClusterJSONBody CreateCluster

// ConfigureClusterAddonsJSONBody defines parameters for ConfigureClusterAddons.
type ConfigureClusterAddonsJSONBody AddonsConfig

// GetClusterMetricsParams defines parameters for GetClusterMetrics.
type GetClusterMetricsParams struct {

	// The type of metric to query
	MetricsType *MetricsType `json:"metricsType,omitempty"`
}

// UpdateNodeListJSONBody defines parameters for UpdateNodeList.
type UpdateNodeListJSONBody NodeUpdateOperation

// PauseClusterJSONBody defines parameters for PauseCluster.
type PauseClusterJSONBody PauseCluster

// UpsertPoliciesJSONBody defines parameters for UpsertPolicies.
type UpsertPoliciesJSONBody PoliciesConfig

// CreateAuthTokenRequestBody defines body for CreateAuthToken for application/json ContentType.
type CreateAuthTokenJSONRequestBody CreateAuthTokenJSONBody

// CreateCloudCredentialsRequestBody defines body for CreateCloudCredentials for application/json ContentType.
type CreateCloudCredentialsJSONRequestBody CreateCloudCredentialsJSONBody

// DeleteFirewallRequestBody defines body for DeleteFirewall for application/json ContentType.
type DeleteFirewallJSONRequestBody DeleteFirewallJSONBody

// CreateOrUpdateFirewallRequestBody defines body for CreateOrUpdateFirewall for application/json ContentType.
type CreateOrUpdateFirewallJSONRequestBody CreateOrUpdateFirewallJSONBody

// DeleteGslbRequestBody defines body for DeleteGslb for application/json ContentType.
type DeleteGslbJSONRequestBody DeleteGslbJSONBody

// CreateOrUpdateGslbRequestBody defines body for CreateOrUpdateGslb for application/json ContentType.
type CreateOrUpdateGslbJSONRequestBody CreateOrUpdateGslbJSONBody

// CreateNewClusterRequestBody defines body for CreateNewCluster for application/json ContentType.
type CreateNewClusterJSONRequestBody CreateNewClusterJSONBody

// ConfigureClusterAddonsRequestBody defines body for ConfigureClusterAddons for application/json ContentType.
type ConfigureClusterAddonsJSONRequestBody ConfigureClusterAddonsJSONBody

// UpdateNodeListRequestBody defines body for UpdateNodeList for application/json ContentType.
type UpdateNodeListJSONRequestBody UpdateNodeListJSONBody

// PauseClusterRequestBody defines body for PauseCluster for application/json ContentType.
type PauseClusterJSONRequestBody PauseClusterJSONBody

// UpsertPoliciesRequestBody defines body for UpsertPolicies for application/json ContentType.
type UpsertPoliciesJSONRequestBody UpsertPoliciesJSONBody
