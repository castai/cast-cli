// Package sdk provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAuditEvents request
	ListAuditEvents(ctx context.Context) (*http.Response, error)

	// LoginCallback request
	LoginCallback(ctx context.Context) (*http.Response, error)

	// Login request
	Login(ctx context.Context, params *LoginParams) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, params *LogoutParams) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context) (*http.Response, error)

	// ListAuthTokens request
	ListAuthTokens(ctx context.Context) (*http.Response, error)

	// CreateAuthToken request  with any body
	CreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateAuthToken(ctx context.Context, body CreateAuthTokenJSONRequestBody) (*http.Response, error)

	// DeleteAuthToken request
	DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId) (*http.Response, error)

	// GetAuthToken request
	GetAuthToken(ctx context.Context, authTokenId AuthTokenId) (*http.Response, error)

	// ListCloudCredentials request
	ListCloudCredentials(ctx context.Context) (*http.Response, error)

	// CreateCloudCredentials request  with any body
	CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*http.Response, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId) (*http.Response, error)

	// GetCloudCredentials request
	GetCloudCredentials(ctx context.Context, credentialsId CredentialsId) (*http.Response, error)

	// DeleteFirewall request  with any body
	DeleteFirewallWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	DeleteFirewall(ctx context.Context, body DeleteFirewallJSONRequestBody) (*http.Response, error)

	// CreateOrUpdateFirewall request  with any body
	CreateOrUpdateFirewallWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateOrUpdateFirewall(ctx context.Context, body CreateOrUpdateFirewallJSONRequestBody) (*http.Response, error)

	// DeleteGslb request  with any body
	DeleteGslbWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	DeleteGslb(ctx context.Context, body DeleteGslbJSONRequestBody) (*http.Response, error)

	// CreateOrUpdateGslb request  with any body
	CreateOrUpdateGslbWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateOrUpdateGslb(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*http.Response, error)

	// ListKubernetesClusters request
	ListKubernetesClusters(ctx context.Context, params *ListKubernetesClustersParams) (*http.Response, error)

	// CreateNewCluster request  with any body
	CreateNewClusterWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateNewCluster(ctx context.Context, body CreateNewClusterJSONRequestBody) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterAddons request
	GetClusterAddons(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// ConfigureClusterAddons request  with any body
	ConfigureClusterAddonsWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error)

	ConfigureClusterAddons(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*http.Response, error)

	// ArchiveCluster request
	ArchiveCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterAuditLog request
	GetClusterAuditLog(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterFeedbackEvents request
	GetClusterFeedbackEvents(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterHealth request
	GetClusterHealth(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterIngressController request
	GetClusterIngressController(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterKubeconfig request
	GetClusterKubeconfig(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// GetClusterMetrics request
	GetClusterMetrics(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*http.Response, error)

	// GetClusterNodes request
	GetClusterNodes(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// UpdateNodeList request  with any body
	UpdateNodeListWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error)

	UpdateNodeList(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*http.Response, error)

	// PauseCluster request  with any body
	PauseClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error)

	PauseCluster(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*http.Response, error)

	// GetPolicies request
	GetPolicies(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// UpsertPolicies request  with any body
	UpsertPoliciesWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error)

	UpsertPolicies(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*http.Response, error)

	// ResumeCluster request
	ResumeCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error)

	// ListRegions request
	ListRegions(ctx context.Context) (*http.Response, error)
}

func (c *Client) ListAuditEvents(ctx context.Context) (*http.Response, error) {
	req, err := NewListAuditEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCallback(ctx context.Context) (*http.Response, error) {
	req, err := NewLoginCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, params *LoginParams) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, params *LogoutParams) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthTokens(ctx context.Context) (*http.Response, error) {
	req, err := NewListAuthTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthToken(ctx context.Context, body CreateAuthTokenJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId) (*http.Response, error) {
	req, err := NewDeleteAuthTokenRequest(c.Server, authTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthToken(ctx context.Context, authTokenId AuthTokenId) (*http.Response, error) {
	req, err := NewGetAuthTokenRequest(c.Server, authTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListCloudCredentials(ctx context.Context) (*http.Response, error) {
	req, err := NewListCloudCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId) (*http.Response, error) {
	req, err := NewDeleteCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudCredentials(ctx context.Context, credentialsId CredentialsId) (*http.Response, error) {
	req, err := NewGetCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFirewallWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteFirewallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFirewall(ctx context.Context, body DeleteFirewallJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteFirewallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateFirewallWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateOrUpdateFirewallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateFirewall(ctx context.Context, body CreateOrUpdateFirewallJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrUpdateFirewallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGslbWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteGslbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGslb(ctx context.Context, body DeleteGslbJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteGslbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGslbWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateOrUpdateGslbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGslb(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrUpdateGslbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListKubernetesClusters(ctx context.Context, params *ListKubernetesClustersParams) (*http.Response, error) {
	req, err := NewListKubernetesClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewClusterWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateNewClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewCluster(ctx context.Context, body CreateNewClusterJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateNewClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterAddons(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterAddonsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureClusterAddonsWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewConfigureClusterAddonsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureClusterAddons(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*http.Response, error) {
	req, err := NewConfigureClusterAddonsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewArchiveClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterAuditLog(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterAuditLogRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterFeedbackEvents(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterFeedbackEventsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterHealth(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterHealthRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterIngressController(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterIngressControllerRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterKubeconfig(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterKubeconfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterMetrics(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*http.Response, error) {
	req, err := NewGetClusterMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterNodes(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetClusterNodesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeListWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateNodeListRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeList(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateNodeListRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PauseClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPauseClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PauseCluster(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*http.Response, error) {
	req, err := NewPauseClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicies(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewGetPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertPoliciesWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpsertPoliciesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertPolicies(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*http.Response, error) {
	req, err := NewUpsertPoliciesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeCluster(ctx context.Context, clusterId ClusterId) (*http.Response, error) {
	req, err := NewResumeClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListRegions(ctx context.Context) (*http.Response, error) {
	req, err := NewListRegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewListAuditEventsRequest generates requests for ListAuditEvents
func NewListAuditEventsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/audit")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginCallbackRequest generates requests for LoginCallback
func NewLoginCallbackRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequest generates requests for Login
func NewLoginRequest(server string, params *LoginParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ReturnTo != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "returnTo", *params.ReturnTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Auth0returnTo != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "auth0returnTo", *params.Auth0returnTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScreenHint != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "screenHint", *params.ScreenHint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string, params *LogoutParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/logout")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ReturnTo != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "returnTo", *params.ReturnTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/session")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthTokensRequest generates requests for ListAuthTokens
func NewListAuthTokensRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthTokenRequest calls the generic CreateAuthToken builder with application/json body
func NewCreateAuthTokenRequest(server string, body CreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAuthTokenRequestWithBody generates requests for CreateAuthToken with any type of body
func NewCreateAuthTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteAuthTokenRequest generates requests for DeleteAuthToken
func NewDeleteAuthTokenRequest(server string, authTokenId AuthTokenId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "authTokenId", authTokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthTokenRequest generates requests for GetAuthToken
func NewGetAuthTokenRequest(server string, authTokenId AuthTokenId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "authTokenId", authTokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCloudCredentialsRequest generates requests for ListCloudCredentials
func NewListCloudCredentialsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCloudCredentialsRequest calls the generic CreateCloudCredentials builder with application/json body
func NewCreateCloudCredentialsRequest(server string, body CreateCloudCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCloudCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCloudCredentialsRequestWithBody generates requests for CreateCloudCredentials with any type of body
func NewCreateCloudCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteCloudCredentialsRequest generates requests for DeleteCloudCredentials
func NewDeleteCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "credentialsId", credentialsId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/credentials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudCredentialsRequest generates requests for GetCloudCredentials
func NewGetCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "credentialsId", credentialsId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/credentials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFirewallRequest calls the generic DeleteFirewall builder with application/json body
func NewDeleteFirewallRequest(server string, body DeleteFirewallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFirewallRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteFirewallRequestWithBody generates requests for DeleteFirewall with any type of body
func NewDeleteFirewallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/firewall")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateOrUpdateFirewallRequest calls the generic CreateOrUpdateFirewall builder with application/json body
func NewCreateOrUpdateFirewallRequest(server string, body CreateOrUpdateFirewallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateFirewallRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrUpdateFirewallRequestWithBody generates requests for CreateOrUpdateFirewall with any type of body
func NewCreateOrUpdateFirewallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/firewall")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteGslbRequest calls the generic DeleteGslb builder with application/json body
func NewDeleteGslbRequest(server string, body DeleteGslbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGslbRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteGslbRequestWithBody generates requests for DeleteGslb with any type of body
func NewDeleteGslbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/gslb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateOrUpdateGslbRequest calls the generic CreateOrUpdateGslb builder with application/json body
func NewCreateOrUpdateGslbRequest(server string, body CreateOrUpdateGslbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateGslbRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrUpdateGslbRequestWithBody generates requests for CreateOrUpdateGslb with any type of body
func NewCreateOrUpdateGslbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/gslb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListKubernetesClustersRequest generates requests for ListKubernetesClusters
func NewListKubernetesClustersRequest(server string, params *ListKubernetesClustersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.CredentialsId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "credentialsId", *params.CredentialsId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewClusterRequest calls the generic CreateNewCluster builder with application/json body
func NewCreateNewClusterRequest(server string, body CreateNewClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewClusterRequestWithBody generates requests for CreateNewCluster with any type of body
func NewCreateNewClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterAddonsRequest generates requests for GetClusterAddons
func NewGetClusterAddonsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigureClusterAddonsRequest calls the generic ConfigureClusterAddons builder with application/json body
func NewConfigureClusterAddonsRequest(server string, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfigureClusterAddonsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewConfigureClusterAddonsRequestWithBody generates requests for ConfigureClusterAddons with any type of body
func NewConfigureClusterAddonsRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewArchiveClusterRequest generates requests for ArchiveCluster
func NewArchiveClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/archive", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterAuditLogRequest generates requests for GetClusterAuditLog
func NewGetClusterAuditLogRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/auditlog", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterFeedbackEventsRequest generates requests for GetClusterFeedbackEvents
func NewGetClusterFeedbackEventsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/feedbackevents", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterHealthRequest generates requests for GetClusterHealth
func NewGetClusterHealthRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/health", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterIngressControllerRequest generates requests for GetClusterIngressController
func NewGetClusterIngressControllerRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/ingress-controller", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterKubeconfigRequest generates requests for GetClusterKubeconfig
func NewGetClusterKubeconfigRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/kubeconfig", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterMetricsRequest generates requests for GetClusterMetrics
func NewGetClusterMetricsRequest(server string, clusterId ClusterId, params *GetClusterMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/metrics", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.MetricsType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "metricsType", *params.MetricsType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterNodesRequest generates requests for GetClusterNodes
func NewGetClusterNodesRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/nodes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNodeListRequest calls the generic UpdateNodeList builder with application/json body
func NewUpdateNodeListRequest(server string, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeListRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpdateNodeListRequestWithBody generates requests for UpdateNodeList with any type of body
func NewUpdateNodeListRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/nodes:update", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPauseClusterRequest calls the generic PauseCluster builder with application/json body
func NewPauseClusterRequest(server string, clusterId ClusterId, body PauseClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPauseClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPauseClusterRequestWithBody generates requests for PauseCluster with any type of body
func NewPauseClusterRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/pause", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPoliciesRequest generates requests for GetPolicies
func NewGetPoliciesRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertPoliciesRequest calls the generic UpsertPolicies builder with application/json body
func NewUpsertPoliciesRequest(server string, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertPoliciesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpsertPoliciesRequestWithBody generates requests for UpsertPolicies with any type of body
func NewUpsertPoliciesRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewResumeClusterRequest generates requests for ResumeCluster
func NewResumeClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kubernetes/clusters/%s/resume", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRegionsRequest generates requests for ListRegions
func NewListRegionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/regions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAuditEvents request
	ListAuditEventsWithResponse(ctx context.Context) (*ListAuditEventsResponse, error)

	// LoginCallback request
	LoginCallbackWithResponse(ctx context.Context) (*LoginCallbackResponse, error)

	// Login request
	LoginWithResponse(ctx context.Context, params *LoginParams) (*LoginResponse, error)

	// Logout request
	LogoutWithResponse(ctx context.Context, params *LogoutParams) (*LogoutResponse, error)

	// GetSession request
	GetSessionWithResponse(ctx context.Context) (*GetSessionResponse, error)

	// ListAuthTokens request
	ListAuthTokensWithResponse(ctx context.Context) (*ListAuthTokensResponse, error)

	// CreateAuthToken request  with any body
	CreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAuthTokenResponse, error)

	CreateAuthTokenWithResponse(ctx context.Context, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error)

	// DeleteAuthToken request
	DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId) (*DeleteAuthTokenResponse, error)

	// GetAuthToken request
	GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId) (*GetAuthTokenResponse, error)

	// ListCloudCredentials request
	ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error)

	// CreateCloudCredentials request  with any body
	CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error)

	CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error)

	// GetCloudCredentials request
	GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error)

	// DeleteFirewall request  with any body
	DeleteFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteFirewallResponse, error)

	DeleteFirewallWithResponse(ctx context.Context, body DeleteFirewallJSONRequestBody) (*DeleteFirewallResponse, error)

	// CreateOrUpdateFirewall request  with any body
	CreateOrUpdateFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateFirewallResponse, error)

	CreateOrUpdateFirewallWithResponse(ctx context.Context, body CreateOrUpdateFirewallJSONRequestBody) (*CreateOrUpdateFirewallResponse, error)

	// DeleteGslb request  with any body
	DeleteGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteGslbResponse, error)

	DeleteGslbWithResponse(ctx context.Context, body DeleteGslbJSONRequestBody) (*DeleteGslbResponse, error)

	// CreateOrUpdateGslb request  with any body
	CreateOrUpdateGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateGslbResponse, error)

	CreateOrUpdateGslbWithResponse(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*CreateOrUpdateGslbResponse, error)

	// ListKubernetesClusters request
	ListKubernetesClustersWithResponse(ctx context.Context, params *ListKubernetesClustersParams) (*ListKubernetesClustersResponse, error)

	// CreateNewCluster request  with any body
	CreateNewClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNewClusterResponse, error)

	CreateNewClusterWithResponse(ctx context.Context, body CreateNewClusterJSONRequestBody) (*CreateNewClusterResponse, error)

	// DeleteCluster request
	DeleteClusterWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterResponse, error)

	// GetCluster request
	GetClusterWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterResponse, error)

	// GetClusterAddons request
	GetClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterAddonsResponse, error)

	// ConfigureClusterAddons request  with any body
	ConfigureClusterAddonsWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*ConfigureClusterAddonsResponse, error)

	ConfigureClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*ConfigureClusterAddonsResponse, error)

	// ArchiveCluster request
	ArchiveClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ArchiveClusterResponse, error)

	// GetClusterAuditLog request
	GetClusterAuditLogWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterAuditLogResponse, error)

	// GetClusterFeedbackEvents request
	GetClusterFeedbackEventsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterFeedbackEventsResponse, error)

	// GetClusterHealth request
	GetClusterHealthWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterHealthResponse, error)

	// GetClusterIngressController request
	GetClusterIngressControllerWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterIngressControllerResponse, error)

	// GetClusterKubeconfig request
	GetClusterKubeconfigWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterKubeconfigResponse, error)

	// GetClusterMetrics request
	GetClusterMetricsWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*GetClusterMetricsResponse, error)

	// GetClusterNodes request
	GetClusterNodesWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterNodesResponse, error)

	// UpdateNodeList request  with any body
	UpdateNodeListWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateNodeListResponse, error)

	UpdateNodeListWithResponse(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*UpdateNodeListResponse, error)

	// PauseCluster request  with any body
	PauseClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*PauseClusterResponse, error)

	PauseClusterWithResponse(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*PauseClusterResponse, error)

	// GetPolicies request
	GetPoliciesWithResponse(ctx context.Context, clusterId ClusterId) (*GetPoliciesResponse, error)

	// UpsertPolicies request  with any body
	UpsertPoliciesWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpsertPoliciesResponse, error)

	UpsertPoliciesWithResponse(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*UpsertPoliciesResponse, error)

	// ResumeCluster request
	ResumeClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterResponse, error)

	// ListRegions request
	ListRegionsWithResponse(ctx context.Context) (*ListRegionsResponse, error)
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
type Response interface {
	Status() string
	StatusCode() int
	GetBody() []byte
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuditEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditEventList
}

// Status returns HTTPResponse.Status
func (r ListAuditEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuditEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type LoginCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r LoginCallbackResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r LoginResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r LogoutResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSession
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetSessionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenList
}

// Status returns HTTPResponse.Status
func (r ListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuthTokensResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthTokenCreateResponse
}

// Status returns HTTPResponse.Status
func (r CreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r GetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsList
}

// Status returns HTTPResponse.Status
func (r ListCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r CreateCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r GetCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteFirewallResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrUpdateFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrUpdateFirewallResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteGslbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGslbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGslbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteGslbResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrUpdateGslbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GSLBResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateGslbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateGslbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrUpdateGslbResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListKubernetesClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterList
}

// Status returns HTTPResponse.Status
func (r ListKubernetesClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKubernetesClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListKubernetesClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateNewClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r CreateNewClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateNewClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonsConfig
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClusterAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ConfigureClusterAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonsConfig
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConfigureClusterAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigureClusterAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ConfigureClusterAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ArchiveClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ArchiveClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterAuditLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterAuditLogEventsList
}

// Status returns HTTPResponse.Status
func (r GetClusterAuditLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterAuditLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterAuditLogResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterFeedbackEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterFeedbackEventsList
}

// Status returns HTTPResponse.Status
func (r GetClusterFeedbackEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterFeedbackEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterFeedbackEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterHealth
}

// Status returns HTTPResponse.Status
func (r GetClusterHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterHealthResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterIngressControllerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesIngressController
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClusterIngressControllerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterIngressControllerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterIngressControllerResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusterKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterKubeconfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterMetrics
}

// Status returns HTTPResponse.Status
func (r GetClusterMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeList
}

// Status returns HTTPResponse.Status
func (r GetClusterNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateNodeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeList
}

// Status returns HTTPResponse.Status
func (r UpdateNodeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateNodeListResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PauseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r PauseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PauseClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesConfig
}

// Status returns HTTPResponse.Status
func (r GetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpsertPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesConfig
}

// Status returns HTTPResponse.Status
func (r UpsertPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpsertPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ResumeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r ResumeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ResumeClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastRegionList
}

// Status returns HTTPResponse.Status
func (r ListRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListRegionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

// ListAuditEventsWithResponse request returning *ListAuditEventsResponse
func (c *ClientWithResponses) ListAuditEventsWithResponse(ctx context.Context) (*ListAuditEventsResponse, error) {
	rsp, err := c.ListAuditEvents(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListAuditEventsResponse(rsp)
}

// LoginCallbackWithResponse request returning *LoginCallbackResponse
func (c *ClientWithResponses) LoginCallbackWithResponse(ctx context.Context) (*LoginCallbackResponse, error) {
	rsp, err := c.LoginCallback(ctx)
	if err != nil {
		return nil, err
	}
	return ParseLoginCallbackResponse(rsp)
}

// LoginWithResponse request returning *LoginResponse
func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, params *LoginParams) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, params *LogoutParams) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// ListAuthTokensWithResponse request returning *ListAuthTokensResponse
func (c *ClientWithResponses) ListAuthTokensWithResponse(ctx context.Context) (*ListAuthTokensResponse, error) {
	rsp, err := c.ListAuthTokens(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListAuthTokensResponse(rsp)
}

// CreateAuthTokenWithBodyWithResponse request with arbitrary body returning *CreateAuthTokenResponse
func (c *ClientWithResponses) CreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthTokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthTokenWithResponse(ctx context.Context, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthToken(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

// DeleteAuthTokenWithResponse request returning *DeleteAuthTokenResponse
func (c *ClientWithResponses) DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId) (*DeleteAuthTokenResponse, error) {
	rsp, err := c.DeleteAuthToken(ctx, authTokenId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthTokenResponse(rsp)
}

// GetAuthTokenWithResponse request returning *GetAuthTokenResponse
func (c *ClientWithResponses) GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId) (*GetAuthTokenResponse, error) {
	rsp, err := c.GetAuthToken(ctx, authTokenId)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTokenResponse(rsp)
}

// ListCloudCredentialsWithResponse request returning *ListCloudCredentialsResponse
func (c *ClientWithResponses) ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error) {
	rsp, err := c.ListCloudCredentials(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListCloudCredentialsResponse(rsp)
}

// CreateCloudCredentialsWithBodyWithResponse request with arbitrary body returning *CreateCloudCredentialsResponse
func (c *ClientWithResponses) CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentialsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

func (c *ClientWithResponses) CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentials(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

// DeleteCloudCredentialsWithResponse request returning *DeleteCloudCredentialsResponse
func (c *ClientWithResponses) DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error) {
	rsp, err := c.DeleteCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudCredentialsResponse(rsp)
}

// GetCloudCredentialsWithResponse request returning *GetCloudCredentialsResponse
func (c *ClientWithResponses) GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error) {
	rsp, err := c.GetCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudCredentialsResponse(rsp)
}

// DeleteFirewallWithBodyWithResponse request with arbitrary body returning *DeleteFirewallResponse
func (c *ClientWithResponses) DeleteFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteFirewallResponse, error) {
	rsp, err := c.DeleteFirewallWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFirewallResponse(rsp)
}

func (c *ClientWithResponses) DeleteFirewallWithResponse(ctx context.Context, body DeleteFirewallJSONRequestBody) (*DeleteFirewallResponse, error) {
	rsp, err := c.DeleteFirewall(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFirewallResponse(rsp)
}

// CreateOrUpdateFirewallWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateFirewallResponse
func (c *ClientWithResponses) CreateOrUpdateFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateFirewallResponse, error) {
	rsp, err := c.CreateOrUpdateFirewallWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateFirewallResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateFirewallWithResponse(ctx context.Context, body CreateOrUpdateFirewallJSONRequestBody) (*CreateOrUpdateFirewallResponse, error) {
	rsp, err := c.CreateOrUpdateFirewall(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateFirewallResponse(rsp)
}

// DeleteGslbWithBodyWithResponse request with arbitrary body returning *DeleteGslbResponse
func (c *ClientWithResponses) DeleteGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteGslbResponse, error) {
	rsp, err := c.DeleteGslbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGslbResponse(rsp)
}

func (c *ClientWithResponses) DeleteGslbWithResponse(ctx context.Context, body DeleteGslbJSONRequestBody) (*DeleteGslbResponse, error) {
	rsp, err := c.DeleteGslb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGslbResponse(rsp)
}

// CreateOrUpdateGslbWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateGslbResponse
func (c *ClientWithResponses) CreateOrUpdateGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateGslbResponse, error) {
	rsp, err := c.CreateOrUpdateGslbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGslbResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateGslbWithResponse(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*CreateOrUpdateGslbResponse, error) {
	rsp, err := c.CreateOrUpdateGslb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGslbResponse(rsp)
}

// ListKubernetesClustersWithResponse request returning *ListKubernetesClustersResponse
func (c *ClientWithResponses) ListKubernetesClustersWithResponse(ctx context.Context, params *ListKubernetesClustersParams) (*ListKubernetesClustersResponse, error) {
	rsp, err := c.ListKubernetesClusters(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListKubernetesClustersResponse(rsp)
}

// CreateNewClusterWithBodyWithResponse request with arbitrary body returning *CreateNewClusterResponse
func (c *ClientWithResponses) CreateNewClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNewClusterResponse, error) {
	rsp, err := c.CreateNewClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateNewClusterWithResponse(ctx context.Context, body CreateNewClusterJSONRequestBody) (*CreateNewClusterResponse, error) {
	rsp, err := c.CreateNewCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewClusterResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// GetClusterAddonsWithResponse request returning *GetClusterAddonsResponse
func (c *ClientWithResponses) GetClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterAddonsResponse, error) {
	rsp, err := c.GetClusterAddons(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterAddonsResponse(rsp)
}

// ConfigureClusterAddonsWithBodyWithResponse request with arbitrary body returning *ConfigureClusterAddonsResponse
func (c *ClientWithResponses) ConfigureClusterAddonsWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*ConfigureClusterAddonsResponse, error) {
	rsp, err := c.ConfigureClusterAddonsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseConfigureClusterAddonsResponse(rsp)
}

func (c *ClientWithResponses) ConfigureClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*ConfigureClusterAddonsResponse, error) {
	rsp, err := c.ConfigureClusterAddons(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseConfigureClusterAddonsResponse(rsp)
}

// ArchiveClusterWithResponse request returning *ArchiveClusterResponse
func (c *ClientWithResponses) ArchiveClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ArchiveClusterResponse, error) {
	rsp, err := c.ArchiveCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseArchiveClusterResponse(rsp)
}

// GetClusterAuditLogWithResponse request returning *GetClusterAuditLogResponse
func (c *ClientWithResponses) GetClusterAuditLogWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterAuditLogResponse, error) {
	rsp, err := c.GetClusterAuditLog(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterAuditLogResponse(rsp)
}

// GetClusterFeedbackEventsWithResponse request returning *GetClusterFeedbackEventsResponse
func (c *ClientWithResponses) GetClusterFeedbackEventsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterFeedbackEventsResponse, error) {
	rsp, err := c.GetClusterFeedbackEvents(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterFeedbackEventsResponse(rsp)
}

// GetClusterHealthWithResponse request returning *GetClusterHealthResponse
func (c *ClientWithResponses) GetClusterHealthWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterHealthResponse, error) {
	rsp, err := c.GetClusterHealth(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterHealthResponse(rsp)
}

// GetClusterIngressControllerWithResponse request returning *GetClusterIngressControllerResponse
func (c *ClientWithResponses) GetClusterIngressControllerWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterIngressControllerResponse, error) {
	rsp, err := c.GetClusterIngressController(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterIngressControllerResponse(rsp)
}

// GetClusterKubeconfigWithResponse request returning *GetClusterKubeconfigResponse
func (c *ClientWithResponses) GetClusterKubeconfigWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterKubeconfigResponse, error) {
	rsp, err := c.GetClusterKubeconfig(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterKubeconfigResponse(rsp)
}

// GetClusterMetricsWithResponse request returning *GetClusterMetricsResponse
func (c *ClientWithResponses) GetClusterMetricsWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*GetClusterMetricsResponse, error) {
	rsp, err := c.GetClusterMetrics(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterMetricsResponse(rsp)
}

// GetClusterNodesWithResponse request returning *GetClusterNodesResponse
func (c *ClientWithResponses) GetClusterNodesWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterNodesResponse, error) {
	rsp, err := c.GetClusterNodes(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterNodesResponse(rsp)
}

// UpdateNodeListWithBodyWithResponse request with arbitrary body returning *UpdateNodeListResponse
func (c *ClientWithResponses) UpdateNodeListWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateNodeListResponse, error) {
	rsp, err := c.UpdateNodeListWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeListResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeListWithResponse(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*UpdateNodeListResponse, error) {
	rsp, err := c.UpdateNodeList(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeListResponse(rsp)
}

// PauseClusterWithBodyWithResponse request with arbitrary body returning *PauseClusterResponse
func (c *ClientWithResponses) PauseClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*PauseClusterResponse, error) {
	rsp, err := c.PauseClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePauseClusterResponse(rsp)
}

func (c *ClientWithResponses) PauseClusterWithResponse(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*PauseClusterResponse, error) {
	rsp, err := c.PauseCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParsePauseClusterResponse(rsp)
}

// GetPoliciesWithResponse request returning *GetPoliciesResponse
func (c *ClientWithResponses) GetPoliciesWithResponse(ctx context.Context, clusterId ClusterId) (*GetPoliciesResponse, error) {
	rsp, err := c.GetPolicies(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesResponse(rsp)
}

// UpsertPoliciesWithBodyWithResponse request with arbitrary body returning *UpsertPoliciesResponse
func (c *ClientWithResponses) UpsertPoliciesWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpsertPoliciesResponse, error) {
	rsp, err := c.UpsertPoliciesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpsertPoliciesResponse(rsp)
}

func (c *ClientWithResponses) UpsertPoliciesWithResponse(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*UpsertPoliciesResponse, error) {
	rsp, err := c.UpsertPolicies(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpsertPoliciesResponse(rsp)
}

// ResumeClusterWithResponse request returning *ResumeClusterResponse
func (c *ClientWithResponses) ResumeClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterResponse, error) {
	rsp, err := c.ResumeCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseResumeClusterResponse(rsp)
}

// ListRegionsWithResponse request returning *ListRegionsResponse
func (c *ClientWithResponses) ListRegionsWithResponse(ctx context.Context) (*ListRegionsResponse, error) {
	rsp, err := c.ListRegions(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListRegionsResponse(rsp)
}

// ParseListAuditEventsResponse parses an HTTP response from a ListAuditEventsWithResponse call
func ParseListAuditEventsResponse(rsp *http.Response) (*ListAuditEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuditEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginCallbackResponse parses an HTTP response from a LoginCallbackWithResponse call
func ParseLoginCallbackResponse(rsp *http.Response) (*LoginCallbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LoginCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAuthTokensResponse parses an HTTP response from a ListAuthTokensWithResponse call
func ParseListAuthTokensResponse(rsp *http.Response) (*ListAuthTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthTokenResponse parses an HTTP response from a CreateAuthTokenWithResponse call
func ParseCreateAuthTokenResponse(rsp *http.Response) (*CreateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthTokenCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAuthTokenResponse parses an HTTP response from a DeleteAuthTokenWithResponse call
func ParseDeleteAuthTokenResponse(rsp *http.Response) (*DeleteAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAuthTokenResponse parses an HTTP response from a GetAuthTokenWithResponse call
func ParseGetAuthTokenResponse(rsp *http.Response) (*GetAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCloudCredentialsResponse parses an HTTP response from a ListCloudCredentialsWithResponse call
func ParseListCloudCredentialsResponse(rsp *http.Response) (*ListCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCloudCredentialsResponse parses an HTTP response from a CreateCloudCredentialsWithResponse call
func ParseCreateCloudCredentialsResponse(rsp *http.Response) (*CreateCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCloudCredentialsResponse parses an HTTP response from a DeleteCloudCredentialsWithResponse call
func ParseDeleteCloudCredentialsResponse(rsp *http.Response) (*DeleteCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudCredentialsResponse parses an HTTP response from a GetCloudCredentialsWithResponse call
func ParseGetCloudCredentialsResponse(rsp *http.Response) (*GetCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFirewallResponse parses an HTTP response from a DeleteFirewallWithResponse call
func ParseDeleteFirewallResponse(rsp *http.Response) (*DeleteFirewallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateOrUpdateFirewallResponse parses an HTTP response from a CreateOrUpdateFirewallWithResponse call
func ParseCreateOrUpdateFirewallResponse(rsp *http.Response) (*CreateOrUpdateFirewallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteGslbResponse parses an HTTP response from a DeleteGslbWithResponse call
func ParseDeleteGslbResponse(rsp *http.Response) (*DeleteGslbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGslbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateOrUpdateGslbResponse parses an HTTP response from a CreateOrUpdateGslbWithResponse call
func ParseCreateOrUpdateGslbResponse(rsp *http.Response) (*CreateOrUpdateGslbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateGslbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GSLBResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListKubernetesClustersResponse parses an HTTP response from a ListKubernetesClustersWithResponse call
func ParseListKubernetesClustersResponse(rsp *http.Response) (*ListKubernetesClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListKubernetesClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewClusterResponse parses an HTTP response from a CreateNewClusterWithResponse call
func ParseCreateNewClusterResponse(rsp *http.Response) (*CreateNewClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNewClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterAddonsResponse parses an HTTP response from a GetClusterAddonsWithResponse call
func ParseGetClusterAddonsResponse(rsp *http.Response) (*GetClusterAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseConfigureClusterAddonsResponse parses an HTTP response from a ConfigureClusterAddonsWithResponse call
func ParseConfigureClusterAddonsResponse(rsp *http.Response) (*ConfigureClusterAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ConfigureClusterAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchiveClusterResponse parses an HTTP response from a ArchiveClusterWithResponse call
func ParseArchiveClusterResponse(rsp *http.Response) (*ArchiveClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ArchiveClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClusterAuditLogResponse parses an HTTP response from a GetClusterAuditLogWithResponse call
func ParseGetClusterAuditLogResponse(rsp *http.Response) (*GetClusterAuditLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterAuditLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterAuditLogEventsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterFeedbackEventsResponse parses an HTTP response from a GetClusterFeedbackEventsWithResponse call
func ParseGetClusterFeedbackEventsResponse(rsp *http.Response) (*GetClusterFeedbackEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterFeedbackEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterFeedbackEventsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterHealthResponse parses an HTTP response from a GetClusterHealthWithResponse call
func ParseGetClusterHealthResponse(rsp *http.Response) (*GetClusterHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterIngressControllerResponse parses an HTTP response from a GetClusterIngressControllerWithResponse call
func ParseGetClusterIngressControllerResponse(rsp *http.Response) (*GetClusterIngressControllerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterIngressControllerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesIngressController
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetClusterKubeconfigResponse parses an HTTP response from a GetClusterKubeconfigWithResponse call
func ParseGetClusterKubeconfigResponse(rsp *http.Response) (*GetClusterKubeconfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClusterMetricsResponse parses an HTTP response from a GetClusterMetricsWithResponse call
func ParseGetClusterMetricsResponse(rsp *http.Response) (*GetClusterMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterNodesResponse parses an HTTP response from a GetClusterNodesWithResponse call
func ParseGetClusterNodesResponse(rsp *http.Response) (*GetClusterNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNodeListResponse parses an HTTP response from a UpdateNodeListWithResponse call
func ParseUpdateNodeListResponse(rsp *http.Response) (*UpdateNodeListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePauseClusterResponse parses an HTTP response from a PauseClusterWithResponse call
func ParsePauseClusterResponse(rsp *http.Response) (*PauseClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PauseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPoliciesResponse parses an HTTP response from a GetPoliciesWithResponse call
func ParseGetPoliciesResponse(rsp *http.Response) (*GetPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertPoliciesResponse parses an HTTP response from a UpsertPoliciesWithResponse call
func ParseUpsertPoliciesResponse(rsp *http.Response) (*UpsertPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpsertPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResumeClusterResponse parses an HTTP response from a ResumeClusterWithResponse call
func ParseResumeClusterResponse(rsp *http.Response) (*ResumeClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResumeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRegionsResponse parses an HTTP response from a ListRegionsWithResponse call
func ParseListRegionsResponse(rsp *http.Response) (*ListRegionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastRegionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
